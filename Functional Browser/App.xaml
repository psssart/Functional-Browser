<Application x:Class="Functional_Browser.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:Functional_Browser"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Assets/Icons/SVG/Icons.xaml" />
                <ResourceDictionary Source="Templates/DataTemplates.xaml"/>
                <ResourceDictionary Source="/Assets/Themes/DarkTheme.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!-- Пример стиля для фокуса -->
            <Style x:Key="FocusVisual2" TargetType="{x:Type Control}">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="2"
                         StrokeDashArray="1 2"
                         Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                         SnapsToDevicePixels="True"
                         StrokeThickness="1"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Пример стиля для TabItem с привязкой к темическим кистям -->
            <Style TargetType="{x:Type TabItem}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual2}"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Background" Value="{DynamicResource TabItem.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource TabItem.Static.Border}"/>
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Padding" Value="6,2,6,2"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabItem}">
                            <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                                <Border x:Name="mainBorder"
                        CornerRadius="0 3 0 0"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="1,1,1,0"
                        Margin="0">
                                    <Border x:Name="innerBorder"
                          Background="{DynamicResource TabItem.Selected.Background}"
                          BorderBrush="{DynamicResource TabItem.Selected.Border}"
                          BorderThickness="1,1,1,0"
                          Margin="-1"
                          Opacity="0"/>
                                </Border>
                                <ContentPresenter x:Name="contentPresenter"
                                  ContentSource="Header"
                                  Focusable="False"
                                  HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                  Margin="{TemplateBinding Padding}"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                            </Grid>
                            <!-- При необходимости можно добавить триггеры шаблона -->
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Пример стиля для Button с использованием DynamicResource для цветовых ресурсов -->
            <Style TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual2}" />
                <Setter Property="Background" Value="{DynamicResource Button.Static.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Button.Static.Border}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Padding" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border"
                      Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      CornerRadius="3"
                      SnapsToDevicePixels="True">
                                <ContentPresenter x:Name="contentPresenter"
                                  Focusable="False"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  Margin="{TemplateBinding Padding}"
                                  RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.MouseOver.Background}" />
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.MouseOver.Border}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Pressed.Background}" />
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Pressed.Border}" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Disabled.Background}" />
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Disabled.Border}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
